#%%
%matplotlib inline

import matplotlib
import numpy as np
import matplotlib.pyplot as plt

stats = {
    'A1': 979515, 'A2': 1458954, 'A3': 2356877, 'A4': 1192324, 'A5': 864906, 'A6': 1862990, 'A7': 833566, 'A8': 1336569, 'A9': 5188707, 'A10': 869596, 'A11': 1885650, 'A12': 2640814, 'B1': 1461334, 'B2': 1430574, 'B3': 1461151, 'B4': 1387233, 'B5': 787276, 'B6': 2516497, 'B7': 3051455, 'B8': 2534009, 'B9': 2196957, 'B10': 1672517, 'B11': 2238618, 'B12': 2239936,
    # 'C1': 1512722, 'C2': 1097656, 'C3': 1199330, 'C4': 1345924, 'C5': 721761, 'C6': 1427646, 'C7': 855286, 'C8': 1639615, 'C9': 2516984, 'C10': 803838, 'C11': 1201528, 'C12': 1826806, 'D1': 827358, 'D2': 862868, 'D3': 759212, 'D4': 1961655, 'D5': 453363, 'D6': 1516236, 'D7': 2341031, 'D8': 1589464, 'D9': 1831497, 'D10': 1376601, 'D11': 2287288, 'D12': 4153978
    }

x_labels, y = zip(*stats.items())

avg = sum([count for count in y])/len(stats)
avg_y = [avg for _ in range(len(stats))]

plt.figure(figsize=(14, 6))
plt.plot(
    y, 'g',
    avg_y, 'b',
)

plt.xticks(range(len(y)), x_labels)
plt.ylim(ymin=0)
plt.xlabel('Cells')
plt.ylabel('Reads')
plt.title('Demultiplexing Cell Sequences Pool A')
plt.show()

#%%
statsB = {}
x_labels, y = zip(*statsB.items())

avg = sum([count for count in y])/len(statsB)
avg_y = [avg for _ in range(len(statsB))]

plt.figure(figsize=(12, 6))
plt.plot(
    y, 'g',
    avg_y, 'b',
)

plt.xticks(range(len(y)), x_labels)
plt.ylim(ymin=0)
plt.xlabel('Cells')
plt.ylabel('Reads')
plt.title('Demultiplexing Cell Sequences Pool B')
plt.show()


#%%
matches = {0: 784599, 1: 117785, 2: 25794, 3: 25239, 4: 19309, 5: 6086, 6: 703}
labels, sizes = zip(*matches.items())
colors = [
    '#1a9850',
    '#91cf60',
    '#d9ef8b',
    '#ffffbf',
    '#fee08b',
    '#fc8d59',
    '#d73027',
]
plt.figure(figsize=(12, 6))
plt.pie(
    sizes,
    labels=labels,
    colors=colors,
    autopct='%1.1f%%',
    startangle=180
)
plt.title('Cell A1')
plt.axis('equal')
plt.show()


#%%
import numpy as np
import matplotlib.pyplot as plt

matches ={
    'A1': {0: 784599, 1: 117785, 2: 25794, 3: 25239, 4: 19309, 5: 6086, 6: 703},
    'A2': {0: 1217848, 1: 177243, 2: 19690, 3: 25733, 4: 11174, 5: 4742, 6: 2524},
    'A3': {0: 2256497, 1: 25703, 2: 19390, 3: 31094, 4: 17590, 5: 6101, 6: 502},
    'A4': {0: 1005439, 1: 108786, 2: 37757, 3: 20151, 4: 13026, 5: 5071, 6: 2094},
    'A5': {0: 662669, 1: 80991, 2: 21685, 3: 81046, 4: 13497, 5: 4628, 6: 390},
    'A6': {0: 1608826, 1: 194121, 2: 17291, 3: 22169, 4: 12019, 5: 4354, 6: 4210},
    'A7': {0: 645343, 1: 127268, 2: 24479, 3: 18209, 4: 13905, 5: 3937, 6: 425},
    'A8': {0: 1173891, 1: 110978, 2: 15102, 3: 18818, 4: 12191, 5: 5053, 6: 536},
    'A9': {0: 4829864, 1: 263248, 2: 28920, 3: 27140, 4: 27515, 5: 11510, 6: 510},
    'A10': {0: 655546, 1: 150392, 2: 17106, 3: 22272, 4: 14126, 5: 6820, 6: 3334},
    'A11': {0: 1623661, 1: 191120, 2: 25706, 3: 22531, 4: 14308, 5: 7748, 6: 576},
    'A12': {0: 2484700, 1: 55853, 2: 21822, 3: 41940, 4: 19763, 5: 15733, 6: 1003},
    'B1': {0: 1378696, 1: 24393, 2: 17429, 3: 25672, 4: 11982, 5: 2921, 6: 241},
    'B2': {0: 1264630, 1: 101098, 2: 15692, 3: 25760, 4: 16106, 5: 4505, 6: 2783},
    'B3': {0: 1263233, 1: 149324, 2: 14057, 3: 18062, 4: 9267, 5: 3548, 6: 3660},
    'B4': {0: 1242109, 1: 80685, 2: 12864, 3: 27480, 4: 15656, 5: 6406, 6: 2033},
    'B5': {0: 621629, 1: 108929, 2: 17164, 3: 17885, 4: 12620, 5: 7141, 6: 1908},
    'B6': {0: 2260393, 1: 217472, 2: 16989, 3: 12599, 4: 5902, 5: 2118, 6: 1024},
    'B7': {0: 2917781, 1: 43737, 2: 56451, 3: 20043, 4: 10642, 5: 2523, 6: 278},
    'B8': {0: 2346858, 1: 128835, 2: 15678, 3: 24102, 4: 13760, 5: 4477, 6: 299},
    'B9': {0: 1927811, 1: 226532, 2: 22985, 3: 9343, 4: 5470, 5: 4686, 6: 130},
    'B10': {0: 1527188, 1: 92369, 2: 18463, 3: 20150, 4: 10299, 5: 3816, 6: 232},
    'B11': {0: 2092409, 1: 104258, 2: 11441, 3: 15647, 4: 12241, 5: 2341, 6: 281},
    'B12': {0: 2170056, 1: 24406, 2: 15999, 3: 17204, 4: 7588, 5: 4506, 6: 177},
    # 'C1': {0: 1272442, 1: 178041, 2: 22313, 3: 20180, 4: 15324, 5: 4018, 6: 404},
    # 'C2': {0: 926769, 1: 124644, 2: 15110, 3: 18211, 4: 7909, 5: 3045, 6: 1968},
    # 'C3': {0: 1134593, 1: 13640, 2: 13708, 3: 21632, 4: 11547, 5: 3823, 6: 387},
    # 'C4': {0: 1181135, 1: 117818, 2: 15500, 3: 16015, 4: 10182, 5: 3356, 6: 1918},
    # 'C5': {0: 565610, 1: 61553, 2: 18647, 3: 62712, 4: 9621, 5: 3277, 6: 341},
    # 'C6': {0: 1247700, 1: 137737, 2: 14078, 3: 15235, 4: 8592, 5: 2615, 6: 1689},
    # 'C7': {0: 682750, 1: 127092, 2: 18987, 3: 13232, 4: 10082, 5: 2644, 6: 499},
    # 'C8': {0: 1471989, 1: 126998, 2: 11792, 3: 14593, 4: 8844, 5: 4796, 6: 603},
    # 'C9': {0: 2335883, 1: 120798, 2: 18488, 3: 19490, 4: 16273, 5: 5627, 6: 425},
    # 'C10': {0: 638548, 1: 116441, 2: 14047, 3: 16845, 4: 11358, 5: 4632, 6: 1967},
    # 'C11': {0: 1030363, 1: 123610, 2: 17142, 3: 14868, 4: 9889, 5: 5303, 6: 353},
    # 'C12': {0: 1722064, 1: 37795, 2: 17449, 3: 26965, 4: 13306, 5: 8488, 6: 739},
    # 'D1': {0: 773730, 1: 13585, 2: 12222, 3: 17523, 4: 8218, 5: 1924, 6: 156},
    # 'D2': {0: 759616, 1: 58124, 2: 11369, 3: 16238, 4: 12111, 5: 3309, 6: 2101},
    # 'D3': {0: 655275, 1: 71257, 2: 9053, 3: 13050, 4: 6468, 5: 2236, 6: 1873},
    # 'D4': {0: 1806680, 1: 99701, 2: 11769, 3: 21062, 4: 13832, 5: 6153, 6: 2458},
    # 'D5': {0: 357065, 1: 56657, 2: 11859, 3: 13047, 4: 8534, 5: 4737, 6: 1464},
    # 'D6': {0: 1358503, 1: 129528, 2: 12503, 3: 8714, 4: 4849, 5: 1420, 6: 719},
    # 'D7': {0: 2245393, 1: 34136, 2: 36792, 3: 15001, 4: 7928, 5: 1601, 6: 180},
    # 'D8': {0: 1471052, 1: 75932, 2: 12200, 3: 16562, 4: 10253, 5: 3212, 6: 253},
    # 'D9': {0: 1635662, 1: 165903, 2: 16094, 3: 7142, 4: 3616, 5: 2953, 6: 127},
    # 'D10': {0: 1260615, 1: 77899, 2: 12742, 3: 14896, 4: 7324, 5: 2924, 6: 201},
    # 'D11': {0: 2152684, 1: 100519, 2: 9422, 3: 13243, 4: 9575, 5: 1665, 6: 180},
    # 'D12': {0: 4076269, 1: 38783, 2: 12714, 3: 15010, 4: 6891, 5: 4111, 6: 200}
}

plt.figure(figsize=(14, 6))
width = 0.85
N_cells = len(matches.keys())
bottom = np.zeros(N_cells)

i_cells = np.arange(N_cells)
i_distances = np.arange(7)

plots = {}

for distance in i_distances:

    reads = [values[distance] for cell, values in matches.items()]
    plots[distance] = plt.bar(i_cells, reads, width, color=colors[distance], bottom=bottom)
    bottom += np.array(reads)


plt.ylabel('base pair mismatch')
plt.title('Barcodes match Distribution')
plt.xticks(i_cells, matches.keys())
plt.legend(i_distances)

plt.show()
